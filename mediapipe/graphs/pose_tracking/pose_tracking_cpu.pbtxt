# MediaPipe graph that performs pose tracking with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"
# Pose landmarks. (NormalizedLandmarkList)
output_stream: "pose_landmarks"

# Generates side packet to enable segmentation.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:enable_segmentation"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value: true }
    }
  }
}

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Subgraph that detects poses and corresponding landmarks.
node {
  calculator: "PoseLandmarkCpu"
  input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "LANDMARKS:pose_landmarks"
  output_stream: "SEGMENTATION_MASK:segmentation_mask"
  output_stream: "DETECTION:pose_detection"
  output_stream: "WORLD_LANDMARKS:pose_world_landmarks"
  output_stream: "ROI_FROM_LANDMARKS:roi_from_landmarks"
}

# We can reuse the existing LandmarksToTensors calculator
node {
  calculator: "LandmarksToCustomTensorCalculator"
  input_stream: "LANDMARKS:pose_world_landmarks"
  output_stream: "TENSORS:tensors"
  options: {
    [mediapipe.LandmarksToCustomTensorCalculatorOptions.ext] {
      attributes: [ X, Y, Z, VISIBILITY, PRESENCE]
    }
  }
}

node {
  calculator: "VerifyInputToModelCalculator"
  input_stream: "TENSORS:tensors"
  output_stream: "LANDMARKS:landmarks"
  output_stream: "NORM_LANDMARKS:norm_landmarks"
  options: {
    [mediapipe.VerifyInputToModelCalculatorOptions.ext] {
      num_landmarks: 33
      input_image_width: 640
      input_image_height: 480
    }
  }
}

# Runs model inference on CPU.
node {
  calculator: "InferenceCalculator"
  input_stream: "TENSORS:tensors"
  output_stream: "TENSORS:output_tensors"
  options: {
    [mediapipe.InferenceCalculatorOptions.ext] {
      model_path: "mediapipe/modules/pose_landmark/saved_model_30_clean.tflite"
    }
  }
}


node {
  calculator: "VerifyInputToModelCalculator"
  input_stream: "TENSORS:output_tensors"
  options: {
    [mediapipe.VerifyInputToModelCalculatorOptions.ext] {
      num_landmarks: 1
      input_image_width: 640
      input_image_height: 480
    }
  }
}

# Subgraph that renders pose-landmark annotation onto the input image.
node {
  calculator: "PoseRendererCpu"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "LANDMARKS:pose_landmarks"
  input_stream: "SEGMENTATION_MASK:segmentation_mask"
  input_stream: "DETECTION:pose_detection"
  input_stream: "ROI:roi_from_landmarks"
  output_stream: "IMAGE:output_video"
}


# bazel build -c opt --define MEDIAPIPE_DISABLE_GPU=1 mediapipe/examples/desktop/pose_tracking:pose_tracking_cpu

# GLOG_logtostderr=1 bazel-bin/mediapipe/examples/desktop/pose_tracking/pose_tracking_cpu \
#   --calculator_graph_config_file=mediapipe/graphs/pose_tracking/pose_tracking_cpu.pbtxt